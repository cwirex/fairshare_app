// Mocks generated by Mockito 5.4.6 from annotations
// in fairshare_app/test/features/expenses/domain/use_cases/get_expenses_by_group_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fairshare_app/features/expenses/domain/entities/expense_entity.dart'
    as _i2;
import 'package:fairshare_app/features/expenses/domain/repositories/expense_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExpenseEntity_0 extends _i1.SmartFake implements _i2.ExpenseEntity {
  _FakeExpenseEntity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ExpenseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseRepository extends _i1.Mock implements _i3.ExpenseRepository {
  MockExpenseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ExpenseEntity> createExpense(_i2.ExpenseEntity? expense) =>
      (super.noSuchMethod(
            Invocation.method(#createExpense, [expense]),
            returnValue: _i4.Future<_i2.ExpenseEntity>.value(
              _FakeExpenseEntity_0(
                this,
                Invocation.method(#createExpense, [expense]),
              ),
            ),
          )
          as _i4.Future<_i2.ExpenseEntity>);

  @override
  _i4.Future<_i2.ExpenseEntity> getExpenseById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenseById, [id]),
            returnValue: _i4.Future<_i2.ExpenseEntity>.value(
              _FakeExpenseEntity_0(
                this,
                Invocation.method(#getExpenseById, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.ExpenseEntity>);

  @override
  _i4.Future<List<_i2.ExpenseEntity>> getExpensesByGroup(String? groupId) =>
      (super.noSuchMethod(
            Invocation.method(#getExpensesByGroup, [groupId]),
            returnValue: _i4.Future<List<_i2.ExpenseEntity>>.value(
              <_i2.ExpenseEntity>[],
            ),
          )
          as _i4.Future<List<_i2.ExpenseEntity>>);

  @override
  _i4.Future<List<_i2.ExpenseEntity>> getAllExpenses() =>
      (super.noSuchMethod(
            Invocation.method(#getAllExpenses, []),
            returnValue: _i4.Future<List<_i2.ExpenseEntity>>.value(
              <_i2.ExpenseEntity>[],
            ),
          )
          as _i4.Future<List<_i2.ExpenseEntity>>);

  @override
  _i4.Future<_i2.ExpenseEntity> updateExpense(_i2.ExpenseEntity? expense) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [expense]),
            returnValue: _i4.Future<_i2.ExpenseEntity>.value(
              _FakeExpenseEntity_0(
                this,
                Invocation.method(#updateExpense, [expense]),
              ),
            ),
          )
          as _i4.Future<_i2.ExpenseEntity>);

  @override
  _i4.Future<void> deleteExpense(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<List<_i2.ExpenseEntity>> watchExpensesByGroup(String? groupId) =>
      (super.noSuchMethod(
            Invocation.method(#watchExpensesByGroup, [groupId]),
            returnValue: _i4.Stream<List<_i2.ExpenseEntity>>.empty(),
          )
          as _i4.Stream<List<_i2.ExpenseEntity>>);

  @override
  _i4.Stream<List<_i2.ExpenseEntity>> watchAllExpenses() =>
      (super.noSuchMethod(
            Invocation.method(#watchAllExpenses, []),
            returnValue: _i4.Stream<List<_i2.ExpenseEntity>>.empty(),
          )
          as _i4.Stream<List<_i2.ExpenseEntity>>);
}
