// Mocks generated by Mockito 5.4.6 from annotations
// in fairshare_app/test/features/groups/domain/use_cases/remove_member_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fairshare_app/features/groups/domain/entities/group_entity.dart'
    as _i2;
import 'package:fairshare_app/features/groups/domain/entities/group_member_entity.dart'
    as _i5;
import 'package:fairshare_app/features/groups/domain/repositories/group_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGroupEntity_0 extends _i1.SmartFake implements _i2.GroupEntity {
  _FakeGroupEntity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GroupRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupRepository extends _i1.Mock implements _i3.GroupRepository {
  MockGroupRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.GroupEntity> createGroup(_i2.GroupEntity? group) =>
      (super.noSuchMethod(
            Invocation.method(#createGroup, [group]),
            returnValue: _i4.Future<_i2.GroupEntity>.value(
              _FakeGroupEntity_0(
                this,
                Invocation.method(#createGroup, [group]),
              ),
            ),
          )
          as _i4.Future<_i2.GroupEntity>);

  @override
  _i4.Future<_i2.GroupEntity> getGroupById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getGroupById, [id]),
            returnValue: _i4.Future<_i2.GroupEntity>.value(
              _FakeGroupEntity_0(this, Invocation.method(#getGroupById, [id])),
            ),
          )
          as _i4.Future<_i2.GroupEntity>);

  @override
  _i4.Future<List<_i2.GroupEntity>> getAllGroups() =>
      (super.noSuchMethod(
            Invocation.method(#getAllGroups, []),
            returnValue: _i4.Future<List<_i2.GroupEntity>>.value(
              <_i2.GroupEntity>[],
            ),
          )
          as _i4.Future<List<_i2.GroupEntity>>);

  @override
  _i4.Future<_i2.GroupEntity> updateGroup(_i2.GroupEntity? group) =>
      (super.noSuchMethod(
            Invocation.method(#updateGroup, [group]),
            returnValue: _i4.Future<_i2.GroupEntity>.value(
              _FakeGroupEntity_0(
                this,
                Invocation.method(#updateGroup, [group]),
              ),
            ),
          )
          as _i4.Future<_i2.GroupEntity>);

  @override
  _i4.Future<void> deleteGroup(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteGroup, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addMember(_i5.GroupMemberEntity? member) =>
      (super.noSuchMethod(
            Invocation.method(#addMember, [member]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeMember(String? groupId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#removeMember, [groupId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<String>> getGroupMembers(String? groupId) =>
      (super.noSuchMethod(
            Invocation.method(#getGroupMembers, [groupId]),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<List<_i2.GroupEntity>> getUserGroups(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserGroups, [userId]),
            returnValue: _i4.Future<List<_i2.GroupEntity>>.value(
              <_i2.GroupEntity>[],
            ),
          )
          as _i4.Future<List<_i2.GroupEntity>>);

  @override
  _i4.Stream<List<_i2.GroupEntity>> watchAllGroups() =>
      (super.noSuchMethod(
            Invocation.method(#watchAllGroups, []),
            returnValue: _i4.Stream<List<_i2.GroupEntity>>.empty(),
          )
          as _i4.Stream<List<_i2.GroupEntity>>);

  @override
  _i4.Stream<List<_i2.GroupEntity>> watchUserGroups(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#watchUserGroups, [userId]),
            returnValue: _i4.Stream<List<_i2.GroupEntity>>.empty(),
          )
          as _i4.Stream<List<_i2.GroupEntity>>);
}
